{
  "version": 3,
  "sources": ["../components/view.ts", "../components/forEach.ts", "../components/elements.ts", "../index.ts"],
  "sourcesContent": ["import { forEach, input, list, S, state, text } from \"../index\";\nimport { ariaRole, Style } from \"./utilTypes\";\n\nexport type N = view | scrollView | list | input | text | forEach | dynNode;\nexport type E = view | scrollView | list | input | text | dynNode;\nexport class baseNode<T extends Node> {\n  constructor(public dom: T) { }\n}\ntype tss_events = { [k in keyof HTMLElementEventMap]?: S<HTMLElementEventMap[k]>; };\ntype tss_exist<T> = T extends void ? never : T;\nfunction keyboardAccessible(dom: HTMLElement) {\n  dom.addEventListener(\"keydown\", () => dom.click());\n}\nexport class baseView<T extends HTMLElement> extends baseNode<T> {\n  style: CSSStyleDeclaration;\n  constructor(dom: T) {\n    super(dom);\n    this.style = this.dom.style;\n  }\n  addStyle(style: Style = {}): this {\n    Object.assign(this.dom.style, style);\n    return this;\n  }\n  setAttr(attr: {\n    [key: string]: string;\n  } = {}): this {\n    for (const k in attr) {\n      this.dom.setAttribute(k, attr[k]);\n    }\n    return this;\n  }\n  private _events: tss_events = {};\n  /** Better accessibility support, adding tabindex to make elements focusable, and triggering events when the Enter key is pressed. */\n  onClick() {\n    keyboardAccessible(this.dom);\n    this.dom.setAttribute(\"tabindex\", \"0\");\n    return this.on(\"click\");\n  }\n  on<T extends keyof tss_events>(event: T) {\n    if (event in this._events) return this._events[event]!.updates();\n    let s = state<HTMLElementEventMap[T]>() as tss_exist<tss_events[T]>;\n    this.dom.addEventListener(event, (e) => { s.update(e); });\n    this._events[event] = s;\n    return s.updates();\n  }\n}\nexport class view extends baseView<HTMLDivElement> {\n  _scrollListener?: N[];\n  constructor(...children: (N | string)[]) {\n    super(document.createElement('div'));\n    for (const ele of children) {\n      if (typeof ele == 'string') {\n        this.dom.appendChild(document.createTextNode(ele));\n      } else {\n        if ((ele instanceof view && ele._scrollListener) || ele instanceof forEach || ele instanceof list) {\n          if (!this._scrollListener) this._scrollListener = [ele];\n          else this._scrollListener.push(ele);\n        }\n        this.dom.appendChild(ele.dom);\n      }\n    }\n  }\n  role(v: ariaRole): this {\n    this.dom.role = v;\n    return this;\n  }\n  _whenScroll(s: scrollView) {\n    this._scrollState?.update(s);\n    this._scrollListener?.forEach(n => { if (!(n instanceof input || n instanceof text)) n._whenScroll(s); });\n  }\n  _scrollState?: S<scrollView>;\n  onScroll() {\n    if (!this._scrollState) this._scrollState = state();\n    return this._scrollState.updates();\n  }\n}\nasync function whenScroll(s: scrollView) {\n  for await (const _ of s.on(\"scroll\")) {\n    s._whenScroll(s);\n  }\n}\nexport class scrollView extends view {\n  constructor(...children: (N | string)[]) {\n    super(...children);\n    this.style.height = '100%';\n    this.style.width = '100%';\n    this.style.overflow = 'auto';\n    if (this._scrollListener != void 0)\n      whenScroll(this);\n  }\n  get scrollTop() {\n    return this.dom.scrollTop;\n  }\n  get scrollLeft() {\n    return this.dom.scrollLeft;\n  }\n  get scrollHeight() {\n    return this.dom.scrollHeight;\n  }\n  get scrollWidth() {\n    return this.dom.scrollWidth;\n  }\n}\nexport function View(...children: (N | string)[]) {\n  return new view(...children);\n}\nexport function ScrollView(...children: (N | string)[]) {\n  return new scrollView(...children);\n}\n\nexport class dynNode {\n  dom: Node = document.createComment(\"\");\n  l?: E;\n  constructor(n: S<E | void>) {\n    this.init(n);\n  }\n  private async init(n: S<void | E>) {\n    for await (const node of n.updates()) {\n      let c;\n      if (!node) {\n        if (this.l) {\n          c = document.createComment(\"\");\n          this.l = void 0;\n        } else {\n          continue;\n        }\n      } else {\n        c = node.dom;\n        this.l = node;\n      }\n      this.dom.parentNode?.replaceChild(c, this.dom);\n      this.dom = c;\n    }\n  }\n  _whenScroll(s: scrollView) {\n    let n = this.l;\n    if (n && !(n instanceof input || n instanceof text))\n      n._whenScroll(s);\n  }\n}\nexport function DynNode(n: S<E | void>) {\n  return new dynNode(n);\n}", "import { N, baseNode, S, scrollView, view, View, E, input } from \"../index\";\n\nfunction find<T>(\n  arr: readonly T[],\n  target: T,\n): number {\n  let left = 0;\n  let right = arr.length;\n\n  while (left < right) {\n    const mid = (left + right) >> 1;\n    if (arr[mid] == target) {\n      return mid;\n    } else if (arr[mid] < target) {\n      left = mid + 1;\n    } else {\n      right = mid;\n    }\n  }\n  return left;\n}\n\nasync function listUpdate<T, U extends baseNode<any>>(list: S<T[]>, f: (item: T) => U, nodes: U[], whenRemove?: (item: T, node: U) => void, d?: Comment, parentEle?: HTMLElement) {\n  let mapIdx = new Map<T, number>();\n  for await (const l of list.updates()) {\n    update(l, mapIdx, f, nodes, whenRemove, d, parentEle);\n  }\n}\nfunction update<T, U extends baseNode<any>>(l: T[], mapIdx: Map<T, number>, f: (item: T) => U, nodes: U[], whenRemove?: (item: T, node: U) => void, d?: Comment, parentEle?: HTMLElement) {\n  let start = l.length;\n  for (let i = 0, len = l.length; i < len; i++)\n    if (mapIdx.get(l[i]) != i) {\n      start = i;\n      break;\n    }\n\n  let end = l.length;\n  for (let i = l.length, j = nodes.length; i--;)\n    if (mapIdx.get(l[i]) != j-- || i < start) {\n      end = i + 1;\n      break;\n    }\n\n  let seq: number[] = [];\n  let pos: number[] = [];\n  for (let i = start; i < end; i++) {\n    const v = mapIdx.get(l[i]);\n    if (v == void 0) continue;\n    if (v < 0) throw new Error('Duplicate elements');\n    mapIdx.set(l[i], -v - 1);\n\n    let n = find(seq, v);\n    seq[n] = v;\n    pos[i] = n;\n  }\n  for (let i = pos.length, len = seq.length - 1; i--;) {\n    if (pos[i] == len) {\n      const _v = mapIdx.get(l[i])!;\n      const v = _v < 0 ? -_v - 1 : _v;\n      seq[len] = v;\n      len--;\n    }\n  }\n  let parentDom = parentEle || d!.parentNode;\n  if (!parentDom) {\n    console.warn('no parent node');\n    return;\n  };\n  for (const key of mapIdx.keys()) {\n    const i = mapIdx.get(key)!;\n    if (i >= start) {\n      mapIdx.delete(key);\n      const n = nodes[i];\n      if (whenRemove) whenRemove(key, n);\n      parentDom.removeChild(n.dom);\n    }\n  }\n  let newNodes: U[] = [];\n  let j = 0, nextI = seq.length > 0 ? seq[j] : end;\n  let next = seq.length > 0 ? nodes[seq[j]].dom : d;\n  for (let i = start; i < end; i++) {\n    const old = mapIdx.get(l[i]);\n    if (old == void 0) {\n      const n = f(l[i]);\n      newNodes[i - start] = n;\n      if (!next) parentDom.appendChild(n.dom);\n      else parentDom.insertBefore(n.dom, next);\n    } else {\n      const k = -old - 1;\n      if (k == nextI) {\n        j++;\n        newNodes[i - start] = nodes[k];\n        if (j < seq.length) {\n          nextI = seq[j];\n          next = nodes[seq[j]].dom;\n        } else {\n          nextI = end;\n          next = d;\n        }\n      } else {\n        const n = nodes[k];\n        newNodes[i - start] = n;\n        if (!next) parentDom.appendChild(n.dom);\n        else parentDom.insertBefore(n.dom, next);\n      }\n    }\n  }\n  let len = l.length;\n  for (let i = start; i < len; i++) {\n    mapIdx.set(l[i], i);\n  }\n  nodes.splice(start, (l.length - end + nodes.length) - start, ...newNodes);\n\n}\n\n/**\n * List elements cannot be duplicated!\n */\nexport class forEach extends baseNode<Comment> {\n  _scrollListener: N[];\n  constructor(public nodes: N[] = []) {\n    super(document.createComment(\"\"));\n    this._scrollListener = nodes;\n  }\n  _whenScroll(s: scrollView) {\n    this._scrollListener.forEach(n => {\n      if (n instanceof view || n instanceof scrollView || n instanceof forEach)\n        n._whenScroll(s);\n    });\n  }\n}\nexport function ForEach<T>(list: S<T[]>, f: (item: T) => E, whenRemove?: ((item: T, node: N) => void)) {\n  let n = new forEach();\n  listUpdate(list, f, n.nodes, whenRemove, n.dom);\n  return n;\n}\nexport class list extends view {\n  constructor(public nodes: E[] = []) {\n    super();\n    this._scrollListener = nodes;\n  }\n}\nexport function List<T>(l: S<T[]>, f: (item: T) => E, nodes: E[] = [], whenRemove?: ((item: T, node: N) => void)) {\n  let n = new list(nodes);\n  listUpdate(l, f, nodes, whenRemove, void 0, n.dom);\n  return n;\n}\nexport class indexedList<T extends E> extends view {\n  constructor(public nodes: T[] = []) {\n    super();\n    this._scrollListener = nodes;\n  }\n}\nexport class listItem extends view {\n  index = 0;\n}\nasync function u<T, U extends listItem>(list: S<T[]>, f: (item: T) => U, nodes: U[], whenRemove?: (item: T, node: U) => void, parentEle?: HTMLElement) {\n  let mapIdx = new Map<T, number>();\n  for await (const l of list.updates()) {\n    update(l, mapIdx, f, nodes, whenRemove, void 0, parentEle);\n    for (let i = 0; i < nodes.length; i++)\n      nodes[i].index = i;\n  }\n}\nexport function IndexedList<T, K extends listItem>(l: S<T[]>, f: (item: T) => K, nodes: K[] = [], whenRemove?: ((item: T, node: K) => void)) {\n  let n = new indexedList(nodes);\n  u(l, f, nodes, whenRemove, n.dom);\n  return n;\n}", "import { S } from \"../index\";\nimport { Style } from \"./utilTypes\";\nimport { baseView } from \"./view\";\n\nasync function updateText(dom: HTMLSpanElement, s: S<string>) {\n  for await (const str of s.updates()) {\n    dom.textContent = str;\n  }\n}\nexport class text {\n  dom = document.createElement('span');\n  style = this.dom.style;\n  constructor(str: string | S<string>) {\n    if (typeof str == \"string\")\n      this.dom.textContent = str;\n    else\n      updateText(this.dom, str);\n  }\n  addStyle(style: Style = {}): this {\n    Object.assign(this.dom.style, style);\n    return this;\n  }\n  bold() {\n    this.style.fontWeight = \"bold\";\n    return this;\n  }\n  italic() {\n    this.style.fontStyle = \"italic\";\n  }\n}\n\nexport class input extends baseView<HTMLInputElement> {\n  constructor() {\n    super(document.createElement('input'));\n  }\n  onInput() {\n    return this.on('input');\n  }\n  async *values() {\n    for await (const _ of this.onInput()) {\n      yield this.dom.value;\n    }\n  };\n}\n\nexport function Text(str: string | S<string>) {\n  return new text(str);\n}\nexport function Input() {\n  return new input();\n}", "if (typeof Promise.withResolvers !== \"function\") {\n  Promise.withResolvers = function <T>(): PromiseWithResolvers<T> {\n    let resolve, reject;\n    const promise = new Promise<T>((res, rej) => {\n      resolve = res;\n      reject = rej;\n    });\n    // @ts-ignore\n    return { promise, resolve, reject };\n  };\n}\n\nclass S<T> {\n  #resolve?: (v: T) => void;\n  #currentPromise?: Promise<T>;\n\n  async *updates() {\n    while (true) {\n      let promise = this.#currentPromise;\n      if (!promise) {\n        let { promise, resolve } = Promise.withResolvers<T>();\n        this.#resolve = resolve;\n        this.#currentPromise = promise;\n        yield await promise;\n      } else {\n        yield await promise;\n      }\n    }\n  }\n\n  update(v: T) {\n    this.#resolve?.(v);\n    this.#currentPromise = void 0;\n  }\n}\n\nexport function state<T>() {\n  return new S<T>();\n}\nexport type { S };\nexport * from \"./components/view\";\nexport * from \"./components/forEach\";\nexport * from \"./components/elements\";"],
  "mappings": "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",
  "names": ["baseNode", "dom", "keyboardAccessible", "baseView", "style", "attr", "k", "event", "s", "state", "e", "view", "_view", "children", "ele", "forEach", "list", "v", "n", "input", "text", "whenScroll", "_", "scrollView", "View", "ScrollView", "dynNode", "node", "c", "DynNode", "find", "arr", "target", "left", "right", "mid", "listUpdate", "list", "f", "nodes", "whenRemove", "d", "parentEle", "mapIdx", "update", "l", "start", "i", "len", "end", "j", "seq", "pos", "v", "n", "_v", "parentDom", "key", "newNodes", "nextI", "next", "old", "k", "forEach", "_forEach", "baseNode", "s", "view", "scrollView", "ForEach", "List", "indexedList", "listItem", "u", "IndexedList", "updateText", "dom", "s", "str", "text", "style", "input", "baseView", "_", "Text", "Input", "resolve", "reject", "res", "rej", "S", "#resolve", "#currentPromise", "promise", "v", "state"]
}
